package main

//管道是线程安全的

//管道遍历不能使用普通for?
//因为管道的数据长度是实时动态递减的.普通for无法确认管道的长度,导致管道数据取出不干净

//遍历为什么要关闭管道?
//使用增强for和无限for遍历管道到,如果不关闭管道,长度无法确定,数据取完,仍在继续取数据,而取不出,会出现死锁错误

//go func(){...}()
//一个开启协程的匿名函数,仅为了方便当前代码和主线程脱离

//exitChan的意义
//当作一个"通知",因为当开启一个协程处理业务时,主线程还在继续执行,为了避免协程未执行完,而主线程退出.
//所以使用exitChan管道记录协程里管道是否工作完毕,在主线程阻塞,等待协程执行完毕.

//管道的阻塞
//一直往管道写数据,而没有读取数据,当写数据长度超出时,会报 bead lock错误
//而只要有读取数据的行为,即便读取数据的速度远远小于写入数据的速度,也不会报错.因为底层会进行判断,只要存在读取行为即可.
